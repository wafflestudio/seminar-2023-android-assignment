// Generated by view binder compiler. Do not edit!
package com.example.voca.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.voca.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class NewVocaListBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final EditText inputListName;

  @NonNull
  public final EditText inputListPassword;

  @NonNull
  public final EditText inputOwnerName;

  @NonNull
  public final TextView newCancel;

  @NonNull
  public final TextView newSave;

  private NewVocaListBinding(@NonNull LinearLayout rootView, @NonNull EditText inputListName,
      @NonNull EditText inputListPassword, @NonNull EditText inputOwnerName,
      @NonNull TextView newCancel, @NonNull TextView newSave) {
    this.rootView = rootView;
    this.inputListName = inputListName;
    this.inputListPassword = inputListPassword;
    this.inputOwnerName = inputOwnerName;
    this.newCancel = newCancel;
    this.newSave = newSave;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static NewVocaListBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static NewVocaListBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.new_voca_list, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static NewVocaListBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.input_list_name;
      EditText inputListName = ViewBindings.findChildViewById(rootView, id);
      if (inputListName == null) {
        break missingId;
      }

      id = R.id.input_list_password;
      EditText inputListPassword = ViewBindings.findChildViewById(rootView, id);
      if (inputListPassword == null) {
        break missingId;
      }

      id = R.id.input_owner_name;
      EditText inputOwnerName = ViewBindings.findChildViewById(rootView, id);
      if (inputOwnerName == null) {
        break missingId;
      }

      id = R.id.new_cancel;
      TextView newCancel = ViewBindings.findChildViewById(rootView, id);
      if (newCancel == null) {
        break missingId;
      }

      id = R.id.new_save;
      TextView newSave = ViewBindings.findChildViewById(rootView, id);
      if (newSave == null) {
        break missingId;
      }

      return new NewVocaListBinding((LinearLayout) rootView, inputListName, inputListPassword,
          inputOwnerName, newCancel, newSave);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
